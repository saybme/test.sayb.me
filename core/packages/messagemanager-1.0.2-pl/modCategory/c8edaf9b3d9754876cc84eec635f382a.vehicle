<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Chunks' => 
    array (
      '9f658ec45412885ee55b720593620eef' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"MessageOuterTpl","description":"Outer Tpl for message display","editor_type":0,"category":0,"cache_type":0,"snippet":"\\n<div id=\\"messagemanager\\">\\n    <h3>[[%mm_your_messages]] ([[+modx.user.username]])<\\/h3>\\n    <form class=\\"mm_form\\" method=\'post\' id=\'userform\' action=\'\'>\\n        <table id=\\"the-node\\">\\n            <tr id=\\"mm_header\\">\\n                <th id=\\"mm_checkbox\\"><input type=\\"checkbox\\" id=\\"mm_check_all\\"><\\/th>\\n                <th id=\\"mm_sender\\">[[%mm_sender]]<\\/th>\\n                <th id=\\"mm_subject\\">[[%mm_subject]]<\\/th>\\n                <th id=\\"mm_sent\\">[[%mm_sent]]<\\/th>\\n                <th id=\\"mm_read\\">[[%mm_read]]<\\/th><\\/tr>\\n            [[+messages]]\\n        <\\/table>\\n        <br\\/>\\n        <input id=\\"mm_submit_delete\\" type=\\"submit\\" name=\\"submit\\" value=\\"[[%mm_delete_selected]]\\">\\n    <\\/form>\\n    <div id=\\"myDialog\\" title=\\"[[%mm_reply]]\\" style=\\"display:none\\">\\n        <form id=\\"dlg_form\\">\\n        <div  id=\\"dlg_new_message\\" style=\\"display:none\\">\\n\\n            <label for=\\"dlg_select_type\\">[[%mm_recipient_type]]<\\/label>\\n            <select id=\\"dlg_select_type\\">\\n                [[+recipient_options]]\\n            <\\/select><span id=\\"mm_recipient\\"><\\/span>\\n            <label id=\\"dlg_select_recipient_label\\" for=\\"dlg_recipient_type\\" style=\\"display:none\\">\\n                <input id=\\"dlg_recipient_type\\" type=\\"text\\" disabled \\/><\\/label>\\n        <\\/div>\\n        <div id=\\"mm_dropdown_list\\" style=\\"display:none\\">\\n            <label for=\\"mm_dropdown_select\\">[[%mm_to]]: <\\/label>\\n            <select id=\\"mm_dropdown_select\\">\\n                <option value=\\"0\\" selected=\\"selected\\"> [[%mm_select_one]]<\\/option>\\n            <\\/select>\\n\\n        <\\/div>\\n\\n        <div id=\\"dlg_subject_div\\">\\n            <label for=\\"dlg_subject\\">[[%mm_subject]]<\\/label>\\n            <input id=\\"dlg_subject\\"\\/>\\n        <\\/div>\\n        <div id=\\"mm_users\\" style=\\"display:none\\"><\\/div>\\n\\n        <label for = \\"myTextarea\\">\\n            <textarea id=\\"myTextarea\\" style=\\"display:none;\\"><\\/textarea>\\n        <\\/label>\\n\\n        <\\/form>\\n\\n    <\\/div>\\n<\\/div>\\n<div id=\\"popup_box\\">    <!-- OUR PopupBox DIV-->\\n    <a id=\\"popupBoxClose\\">[[%mm_close]]<\\/a>\\n\\n    <p id=\\"popup_text\\"><\\/p>\\n<\\/div>","locked":0,"properties":null,"static":0,"static_file":"","content":"\\n<div id=\\"messagemanager\\">\\n    <h3>[[%mm_your_messages]] ([[+modx.user.username]])<\\/h3>\\n    <form class=\\"mm_form\\" method=\'post\' id=\'userform\' action=\'\'>\\n        <table id=\\"the-node\\">\\n            <tr id=\\"mm_header\\">\\n                <th id=\\"mm_checkbox\\"><input type=\\"checkbox\\" id=\\"mm_check_all\\"><\\/th>\\n                <th id=\\"mm_sender\\">[[%mm_sender]]<\\/th>\\n                <th id=\\"mm_subject\\">[[%mm_subject]]<\\/th>\\n                <th id=\\"mm_sent\\">[[%mm_sent]]<\\/th>\\n                <th id=\\"mm_read\\">[[%mm_read]]<\\/th><\\/tr>\\n            [[+messages]]\\n        <\\/table>\\n        <br\\/>\\n        <input id=\\"mm_submit_delete\\" type=\\"submit\\" name=\\"submit\\" value=\\"[[%mm_delete_selected]]\\">\\n    <\\/form>\\n    <div id=\\"myDialog\\" title=\\"[[%mm_reply]]\\" style=\\"display:none\\">\\n        <form id=\\"dlg_form\\">\\n        <div  id=\\"dlg_new_message\\" style=\\"display:none\\">\\n\\n            <label for=\\"dlg_select_type\\">[[%mm_recipient_type]]<\\/label>\\n            <select id=\\"dlg_select_type\\">\\n                [[+recipient_options]]\\n            <\\/select><span id=\\"mm_recipient\\"><\\/span>\\n            <label id=\\"dlg_select_recipient_label\\" for=\\"dlg_recipient_type\\" style=\\"display:none\\">\\n                <input id=\\"dlg_recipient_type\\" type=\\"text\\" disabled \\/><\\/label>\\n        <\\/div>\\n        <div id=\\"mm_dropdown_list\\" style=\\"display:none\\">\\n            <label for=\\"mm_dropdown_select\\">[[%mm_to]]: <\\/label>\\n            <select id=\\"mm_dropdown_select\\">\\n                <option value=\\"0\\" selected=\\"selected\\"> [[%mm_select_one]]<\\/option>\\n            <\\/select>\\n\\n        <\\/div>\\n\\n        <div id=\\"dlg_subject_div\\">\\n            <label for=\\"dlg_subject\\">[[%mm_subject]]<\\/label>\\n            <input id=\\"dlg_subject\\"\\/>\\n        <\\/div>\\n        <div id=\\"mm_users\\" style=\\"display:none\\"><\\/div>\\n\\n        <label for = \\"myTextarea\\">\\n            <textarea id=\\"myTextarea\\" style=\\"display:none;\\"><\\/textarea>\\n        <\\/label>\\n\\n        <\\/form>\\n\\n    <\\/div>\\n<\\/div>\\n<div id=\\"popup_box\\">    <!-- OUR PopupBox DIV-->\\n    <a id=\\"popupBoxClose\\">[[%mm_close]]<\\/a>\\n\\n    <p id=\\"popup_text\\"><\\/p>\\n<\\/div>"}',
        'guid' => '67762a5bc1356ee73a31780c341e5ef5',
        'native_key' => 1,
        'signature' => '96349caf75f3c9b13a43bd65196ac621',
      ),
      'd4d2708ddb808e649d47089baadd29e3' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"MessageTpl","description":"Tpl for individual messages","editor_type":0,"category":0,"cache_type":0,"snippet":"\\n<tr class=\\"mm_tr\\" id=\\"[[+mm.id]]\\">\\n    <td class=\\"mm_checkbox\\"><input type=\\"checkbox\\" class=\\"mm_box\\" name=\\"messages[]\\" value=\\"[[+mm.id]]\\"><\\/td>\\n    <td class=\\"mm_sender\\">[[+mm.sender]]<\\/td>\\n    <td class=\\"mm_subject zoomin\\" id=\\"mm_subject[[+mm.id]]\\"> <span id=\\"mm_expand[[+mm.id]]\\" class=\\"mm_expand\\">&#x25BE;<\\/span> [[+mm.subject]]<\\/td>\\n    <td class=\\"mm_date_sent\\">[[+mm.date_sent]]<\\/td>\\n    <td id=\\"mm_read[[+mm.id]]\\" class=\\"[[+mm.read_indicator]]\\">[[+mm.read]]<\\/td>\\n<\\/tr>\\n\\n<tr class=\\"mm_message_tr\\" id=\\"mm_message[[+mm.id]]\\">\\n    <td class=\\"mm_message\\"  colspan=\\"0\\">[[+mm.message]]<\\/td>\\n<\\/tr>\\n<tr class=\\"mm_sender_id\\" id=\\"mm_sender_id[[+mm.id]]\\" style=\\"display:none\\"><td colspan=\\"0\\" id=\\"mm_sender[[+mm.id]]\\">[[+mm.sender_id]]<\\/td><\\/tr>\\n","locked":0,"properties":"a:0:{}","static":0,"static_file":"","content":"\\n<tr class=\\"mm_tr\\" id=\\"[[+mm.id]]\\">\\n    <td class=\\"mm_checkbox\\"><input type=\\"checkbox\\" class=\\"mm_box\\" name=\\"messages[]\\" value=\\"[[+mm.id]]\\"><\\/td>\\n    <td class=\\"mm_sender\\">[[+mm.sender]]<\\/td>\\n    <td class=\\"mm_subject zoomin\\" id=\\"mm_subject[[+mm.id]]\\"> <span id=\\"mm_expand[[+mm.id]]\\" class=\\"mm_expand\\">&#x25BE;<\\/span> [[+mm.subject]]<\\/td>\\n    <td class=\\"mm_date_sent\\">[[+mm.date_sent]]<\\/td>\\n    <td id=\\"mm_read[[+mm.id]]\\" class=\\"[[+mm.read_indicator]]\\">[[+mm.read]]<\\/td>\\n<\\/tr>\\n\\n<tr class=\\"mm_message_tr\\" id=\\"mm_message[[+mm.id]]\\">\\n    <td class=\\"mm_message\\"  colspan=\\"0\\">[[+mm.message]]<\\/td>\\n<\\/tr>\\n<tr class=\\"mm_sender_id\\" id=\\"mm_sender_id[[+mm.id]]\\" style=\\"display:none\\"><td colspan=\\"0\\" id=\\"mm_sender[[+mm.id]]\\">[[+mm.sender_id]]<\\/td><\\/tr>\\n"}',
        'guid' => '376f868845b5e66c200235612556f074',
        'native_key' => 2,
        'signature' => 'a412b0a538416caa00aaf24f60f0995a',
      ),
      '86cbb94450529a3bf7db9b8b7ce38d90' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modChunk',
        'object' => '{"id":3,"source":0,"property_preprocess":0,"name":"mmAjaxJs","description":"JS for Ajax resource","editor_type":0,"category":0,"cache_type":0,"snippet":"<script type=\\"text\\/javascript\\">\\n\\/**\\n * JS file for MessageManager extra\\n * \\n * Copyright 2015-2018 Bob Ray <https:\\/\\/bobsguides.com>\\n * Created on 01-27-2015\\n *\\n * MessageManager is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * MessageManager is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * MessageManager; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n * @package messagemanager\\n *\\/\\n\\n\\n\\n\\n\\/* *** Context Menu *** *\\/\\n$(function () {\\n    var myTable = $(\'table#the-node\');\\n    var myTextarea = $(\'#myTextarea\');\\n    var myUserList = $(\'#mm_userlist\');\\n    var mm_body = $(\\"body\\");\\n    var mm_new_message = $(\'#dlg_new_message\');\\n    var toNameField = $(\'span#mm_recipient\');\\n    var mmUsers = $(\'#mm_users\');\\n    var mt = myTextarea;\\n    var ul = myUserList;\\n    var ddl = $(\'#mm_dropdown_list\');\\n    var spinnerTarget = document.getElementsByTagName(\\"body\\")[0];\\n    var mmSpinner = createSpinner();\\n\\n    var pop = new Popup($(\\"#popup_box\\"), mm_body);\\n\\n    \\/* Display \\"No messages\\" if table is empty (except header row) *\\/\\n    checkEmpty();\\n\\n    $(\'#the-node\').contextMenu({\\n        \\/* selector: \'li\', *\\/\\n        selector: \'tr\',\\n        callback: function (key, options) {\\n            var id = getId($(this).attr(\'id\')) || null;\\n            switch (key) {\\n                case \'markunread\':\\n                    mmMarkUnread(id, mmLex(\'mm_no\'));\\n                    break;\\n                case \'delete\':\\n                    if (id === null) {\\n                        break;\\n                    }\\n                    promise7 = mmAjax(id, \'security\\/message\\/remove\', {});\\n                    mmSpinner.spin(spinnerTarget);\\n                    promise7.done(function (data) {\\n                        mmSpinner.stop();\\n                        $(\'tr#\' + id).remove();\\n                        $(\'tr#mm_message\' + id).remove();\\n                        $(\'tr#mm_sender_id\' + id).remove();\\n                        checkEmpty();\\n                        pop.setText(mmLex(\'mm_message_deleted\'));\\n                        pop.load(1);\\n                    });\\n                    break;\\n                case \'reply\':\\n                    mmReply(id);\\n                    break;\\n                case \'newmessage\':\\n                    mmReply(null, true);\\n                    break;\\n            }\\n        },\\n       items: {\\n\\n           \\"markunread\\": {name: \\"Mark Unread\\", icon: \\"markunread\\"},\\n           \\"delete\\": {name: \\"Delete\\", icon: \\"delete\\"},\\n           \\"reply\\": {name: \\"Reply\\", icon: \\"reply\\"},\\n           \\"newmessage\\": {name: \\"New Message\\", icon: \\"newmessage\\"},\\n           \\"sep1\\": \\"---------\\",\\n           \\"quit\\": {name: \\"Cancel\\", icon: \\"cancel\\"}\\n       }\\n   });\\n\\n    function clearDialog() {\\n        mt.val(\'\');\\n        ul.val(\'\');\\n        ul.hide();\\n        mt.hide();\\n        ddl.hide();\\n        mm_new_message.hide();\\n        toNameField.html(\'\');\\n        toNameField.hide();\\n        mmUsers.val(\'\');\\n        mmUsers.hide();\\n\\n    }\\n\\n    function checkEmpty() {\\n        if (myTable.find(\\"tr\\").length == 1) {\\n            $(myTable.append(\'<tr><td colspan=\\"5\\">\' + mmLex(\'mm_no_messages\') + \'<\\/td><\\/tr>\'));\\n        }\\n    }\\n\\n    function mmReply(id, newMessage) {\\n        newMessage = newMessage || null;\\n        if (id === null) {\\n            if (newMessage == null) {\\n                return false;\\n            }\\n        }\\n        var recipientId = null;\\n        var recipientType = null;\\n        \\/*var toNameField = $(\'span#mm_recipient\');\\n        var mmUsers = $(\'#mm_users\');\\n        var mt = myTextarea;\\n        var ul = myUserList;\\n        var ddl = $(\'#mm_dropdown_list\');*\\/\\n        ul.hide();\\n        toNameField.hide();\\n        var action = \'security\\/message\\/create\';\\n        var dlgSubjectObj = $(\\"#dlg_subject\\");\\n        var subject = \'\';\\n        if (id !== null) {\\n            subject = $.trim($(\'#mm_subject\' + id).html().replace(\\/<span[^>]*>.*<\\\\\\/span>\\/, \\"\\"));\\n            var replyPrefix = \\"[re:] \\";\\n            if (subject.indexOf(replyPrefix) == -1) {\\n                subject = replyPrefix + subject;\\n            }\\n        }\\n        dlgSubjectObj.val(subject);\\n\\n        var message = \'\';\\n        var myDialog = $(\\"#myDialog\\").dialog({\\n            autoOpen: false,\\n            maxWidth: 500,\\n            maxHeight: 400,\\n            width: 500,\\n            height: 400,\\n            modal: true,\\n            draggable: false,\\n            buttons: {\\n                \\"Quote\\": {\\n                    text: \\"Quote\\",\\n                    id: \\"mm_left_button\\",\\n                    class: \'mm_left_button\',\\n                    click: function() {\\n                        var originalMessageText = $(\\"#mm_message\\" + id).find(\'td:first\').html();\\n                        originalMessageText = originalMessageText.replace(\\/&lt;\\/g, \'<\');\\n                        originalMessageText = originalMessageText.replace(\\/&gt;\\/g, \'>\');\\n                        mt.val(\\"<< \\" + originalMessageText + \\" >>\\");\\n                    }\\n                },\\n\\n                \\"Cancel\\": function () {\\n                    clearDialog();\\n                    $(this).dialog(\\"close\\");\\n                },\\n                \\"Send\\": {\\n                    id: \'mm_button_send\',\\n                    text: \\"Send\\"\\n                }\\n            }\\n         });\\n\\n        if (newMessage !== null) { \\/* New Message *\\/\\n            document.forms[\'dlg_form\'].reset();\\n\\n\\n            var selectTypeOptions = $(\\"#dlg_select_type\\");\\n\\n            var groupId = null;\\n            myDialog.dialog(\'option\', \'title\', \'New Message\');\\n            mm_new_message.show();\\n            mt.hide();\\n            ddl.hide();\\n            \\/\\/ selectTypeOptions.find(\'option:first\').attr(\'selected\', \'selected\');\\n            \\/\\/ selectTypeOptions[0].selectedIndex = 0;\\n                       \\/\\/ selectTypeOptions.prepend(\'<option selected=\\"selected\\" value=\\"0\\"> Select Type <\\/option>\');\\n            selectTypeOptions.change(function () {\\n                var selection = this.value;\\n\\n                if (selection == 0) {\\n                    return false;\\n                }\\n                $(\\"#dlg_recipient_type\\").html(selection);\\n                recipientType = selection;\\n\\n                switch(selection) {\\n                    case \'user\':\\n                        ddl.hide();\\n                        mmSpinner.spin(spinnerTarget);\\n                        var promise1 = mmAjax(null, \'security\\/user\\/getlist\', {limit:0});\\n                        promise1.done(function (data) {\\n                            var results = data.data.results;\\n                            \\/\\/ var count = results.length;\\n                            var r = [], j = 0;\\n                            r[++j] = \'<div id=\\"mm_users\\"><h3>Select Recipient<\\/h3>\';\\n                            for (var key = 0, size = results.length; key < size; key++) {\\n                                r[++j] = \'<span id=\\"\' + results[key].id +\\n                                         \'\\" class=\\"mm_user\\">\';\\n\\n                                r[++j] = empty(results[key].fullname)\\n                                    ? results[key].username\\n                                    : results[key].fullname;\\n                                r[++j] = \'<\\/span>\';\\n                            }\\n                            r[++j] = \'<\\/div>\';\\n\\n                            mmUsers.html(r.join(\' \'));\\n                            mmUsers.show();\\n                            mmSpinner.stop();\\n                            $(\'span.mm_user\').on(\\"click\\", function (e) {\\n                                recipientId = e.target.id;\\n                                var recipientName = $(this).html();\\n                                if (recipientId == undefined) {\\n                                    e.preventDefault();\\n                                    e.stopPropagation();\\n                                    return;\\n                                }\\n                                toNameField.html(recipientName);\\n                                toNameField.show();\\n                                mmUsers.hide();\\n                                mt.show();\\n\\n\\n                            });\\n                        });\\n\\n                        break;\\n                    case \'usergroup\':\\n                        mmUsers.hide();\\n                        toNameField.hide();\\n                        mmSpinner.spin(spinnerTarget);\\n                        var promise = mmAjax(null, \'security\\/group\\/getlist\');\\n                        promise.done(function(data) {\\n                            var results = data.data.results;\\n                            var r = [], j = 0;\\n\\n                            for (var key = 0, size = results.length; key < size; key++) {\\n                                r[++j] = \'<option value=\\"\' + results[key].id + \'\\" class=\\"mm_user\\">\';\\n                                r[++j] = results[key].name;\\n                                r[++j] = \'<\\/option>\';\\n                            }\\n                            $(\'#mm_dropdown_select\').append(r.join(\' \'));\\n\\n\\n                            ddl.on(\\"click\\", function (e) {\\n                                groupId = e.target.value;\\n\\n                                if (groupId == 0) {\\n                                    e.preventDefault();\\n                                    e.stopPropagation();\\n                                    return;\\n                                }\\n\\n                                mt.show();\\n\\n\\n                            });\\n\\n                            ddl.show();\\n                        });\\n\\n                        break;\\n                    case \'all\':\\n                        mmUsers.hide();\\n                        toNameField.hide();\\n                        ddl.hide();\\n                        mt.show();\\n                        break;\\n                    default:\\n                        break;\\n                }\\n\\n            });\\n\\n            $(\'#mm_left_button\').hide();\\n            $(\\"#mm_button_send\\").unbind(\\"click\\").click(function () {\\n                message = $.trim(mt.val());\\n                if (message.length == 0) {\\n                    pop.setText(mmLex(\\"mm_empty_message\\"));\\n                    pop.load(20);\\n                } else {\\n                    subject = $(\'input#dlg_subject\').val();\\n\\n                    if (subject.length === 0) {\\n                        pop.setText(mmLex(\\"mm_empty_subject\\"));\\n                        pop.load(20);\\n                        return false;\\n                    }\\n\\n                    mmSpinner.spin(spinnerTarget);\\n                    switch(recipientType) {\\n                        case \'all\':\\n                           promise4 = mmAjax(null, \'security\\/message\\/create\', {\'type\':\'all\',\'subject\': subject,\'message\': message});\\n                            break;\\n\\n                        case \'user\':\\n                            promise4 = mmAjax(null, \'security\\/message\\/create\', {\'type\':\'user\',\'user\':recipientId,\'subject\':subject,\'message\':message});\\n                            break;\\n\\n                        case \'usergroup\':\\n                            promise4 = mmAjax(null, \'security\\/message\\/create\', {\'type\':\'usergroup\',\'group\':groupId,\'subject\': subject,\'message\': message});\\n                            break;\\n                    }\\n                    promise4.done(function (data) {\\n                        clearDialog();\\n                        mmSpinner.stop();\\n                        pop.setText(mmLex(\'mm_message_sent\'));\\n                        myDialog.dialog(\\"close\\");\\n                        pop.load();\\n                    });\\n                }\\n            });\\n        } else { \\/* Reply *\\/\\n            ul.hide();\\n            mt.show();\\n            recipientId = $(\'#mm_sender\' + id).html();\\n            $(\\"#mm_button_send\\").unbind(\\"click\\").click(function () {\\n                message = $.trim(mt.val());\\n                if (message.length == 0) {\\n                    pop.setText(mmLex(\\"mm_empty_message\\"));\\n                    pop.load(20);\\n                } else {\\n                    \\/\\/ alert(\'Clicked reply\');\\n                    subject = $(\'input#dlg_subject\').val();\\n                    if (subject.length === 0) {\\n                        pop.setText(mmLex(\'mm_empty_subject\'));\\n                        pop.load(20);\\n                        return false;\\n                    }\\n\\n                    mmSpinner.spin(spinnerTarget);\\n                    promise5 = mmAjax(id, action, {\'subject\': subject, \'message\': message, \'user\': recipientId});\\n                    promise5.done(function (data) {\\n\\n                        clearDialog();\\n                        mmSpinner.stop();\\n                        pop.setText(mmLex(\'mm_message_sent\'));\\n                        myDialog.dialog(\\"close\\");\\n                        pop.load();\\n                    });\\n                }\\n            });\\n        }\\n\\n        myDialog.dialog(\\"open\\");\\n\\n    }\\n\\n\\n    \\/* onClick function for subject field *\\/\\n    $(\\".mm_subject\\").on(\\"click\\", function() {\\n        var id = getId(this.id);\\n        var subject = $(\'#mm_message\' + id);\\n        if (subject.is(\\":visible\\")) {\\n            mmCloseSubject(subject, id);\\n        } else {\\n            mmOpenSubject(subject, id);\\n        }\\n    });\\n\\n    $(\\"#mm_submit_delete\\").on(\\"click\\", function (e) {\\n\\n        e.preventDefault();\\n        e.stopPropagation();\\n        mmSpinner.spin(spinnerTarget);\\n        $(\'input:checked\').each(function () {\\n            id = $(this).val();\\n            promise6 = mmAjax(id, \'security\\/message\\/remove\', {});\\n            $(\'tr#\' + id).remove();\\n            $(\'tr#mm_message\' + id).remove();\\n            $(\'tr#mm_sender_id\' + id).remove();\\n\\n        });\\n        \\/* Uncheck checkbox in header *\\/\\n        $(\\"#mm_check_all\\").prop(\\"checked\\", false);\\n\\n        promise6.done(function (data) {\\n            mmSpinner.stop();\\n            pop.setText(mmLex(\'mm_messages_deleted\'));\\n            pop.load();\\n\\n            \\/* Display \\"No messages\\" if table is empty (except header row) *\\/\\n            checkEmpty();\\n        });\\n    });\\n\\n\\n    function mmAjax(id, action, dataIn) {\\n        dataIn = dataIn || {};\\n        dataIn[\'id\'] = id;\\n        dataIn[\'action\'] = action;\\n\\n        \\/* Ajax call to action; calls MODX resource pseudo-connector *\\/\\n        return $.ajax({\\n            type: \\"POST\\",\\n            url: \\"mm-ajax[[+html_file_extension]]\\",\\n            data: dataIn,\\n            dataType: \\"json\\"\\n\\n        }).done(function () {\\n            mmSpinner.stop();\\n        }).fail(function (jqXHR, textStatus) {\\n            mmSpinner.stop();\\n            pop.setText(action + \' failed on message \' + id + \' \' + textStatus);\\n            pop.load(40);\\n        });\\n    }\\n\\n\\n    \\/* Pulls ID out of selector ID like \'mm_message12\' *\\/\\n    function getId(s) {\\n        if (s === undefined) {\\n            return null;\\n        }\\n        var number = s.match(\\/\\\\d+$\\/);\\n        number = parseInt(number, 10);\\n        return number\\n    }\\n\\n    \\/* Mark message read in DB and on screen *\\/\\n    function mmMarkRead(id, message) {\\n        var e = $(\'#mm_read\' + id);\\n\\n        if (e.html() == mmLex(\'mm_no\')) {\\n            e.html(mmLex(\'mm_yes\'));\\n            e.toggleClass(\\"Yes No\\");\\n            mmAjax(id, \'security\\/message\\/read\', {})\\n        }\\n    }\\n\\n    \\/* Mark message unread in DB and on screen;\\n     hide message if visible; change cursor to +\\n     *\\/\\n    function mmMarkUnread(id, message) {\\n        var read = $(\'#mm_read\' + id);\\n        if (read.html() === undefined) {\\n            return false;\\n        }\\n\\n        if (read.html() == mmLex(\'mm_yes\')) {\\n\\n            mmSpinner.spin(spinnerTarget);\\n            promise8 = mmAjax(id, \'security\\/message\\/unread\', {});\\n            promise8.done(function (data) {\\n                mmSpinner.stop();\\n                read.toggleClass(\\"Yes No\\");\\n                read.html(mmLex(\'mm_no\'));\\n            });\\n        }\\n        messageId = $(\'#mm_message\' + id);\\n        if (! messageId.is(\':hidden\')) {\\n            mmCloseSubject(messageId, id);\\n        }\\n\\n    }\\n\\n    \\/* Show message if hidden; mark read in DB and on screen;\\n     change down arrow to up arrow; change cursor to -\\n     *\\/\\n\\n    function mmOpenSubject(msg, id) {\\n        msg.show();\\n        msg.attr(\\"style\\", \\"display:table-row\\");\\n        var td = $(\'.mm_message\');\\n        td.attr(\'style\', \'display:table-cell\');\\n        td.attr(\'colspan\', \\"5\\");\\n        mmMarkRead(id, mmLex(\'mm_yes\'));\\n        $(\'#mm_expand\' + id).html(\'\\\\u25B4\');\\n        $(\'#mm_subject\' + id).toggleClass(\\"zoomin zoomout\\");\\n    }\\n\\n    \\/* Hide message if visible; change up arrow to down arrow *\\/\\n    function mmCloseSubject(msg, id) {\\n        msg.attr(\'colspan\', 5);\\n        msg.hide();\\n        $(\'#mm_expand\' + id).html(\'\\\\u25BE\');\\n        $(\'#mm_subject\' + id).toggleClass(\\"zoomin zoomout\\");\\n    }\\n\\n    $(function () {\\n        $(\\"#mm_check_all\\").change(function () {\\n            if (this.checked) {\\n                $(\'.mm_box\').prop(\\"checked\\", true);\\n            } else {\\n                $(\'.mm_box\').prop(\\"checked\\", false);\\n            }\\n        });\\n    });\\n\\n    function empty(data) {\\n        if (typeof(data) == \'number\' || typeof(data) == \'boolean\') {\\n            return false;\\n        }\\n        if (typeof(data) == \'undefined\' || data === null) {\\n            return true;\\n        }\\n        if (typeof(data.length) != \'undefined\') {\\n            return data.length == 0;\\n        }\\n        var count = 0;\\n        for (var i in data) {\\n            if (data.hasOwnProperty(i)) {\\n                count++;\\n            }\\n        }\\n        return count == 0;\\n    }\\n\\n    function createSpinner() {\\n        var opts = {\\n            lines: 17, \\/\\/ The number of lines to draw\\n            length: 17, \\/\\/ The length of each line\\n            width: 4, \\/\\/ The line thickness\\n            radius: 5, \\/\\/ The radius of the inner circle\\n            corners: 1, \\/\\/ Corner roundness (0..1)\\n            rotate: 0, \\/\\/ The rotation offset\\n            direction: 1, \\/\\/ 1: clockwise, -1: counterclockwise\\n            color: \'#56A717\', \\/\\/ #rgb or #rrggbb or array of colors\\n            speed: 0.6, \\/\\/ Rounds per second\\n            trail: 81, \\/\\/ Afterglow percentage\\n            shadow: false, \\/\\/ Whether to render a shadow\\n            hwaccel: false, \\/\\/ Whether to use hardware acceleration\\n            className: \'spinner\', \\/\\/ The CSS class to assign to the spinner\\n            zIndex: 2e9, \\/\\/ The z-index (defaults to 2000000000)\\n            top: \'50%\', \\/\\/ Top position relative to parent\\n            left: \'50%\' \\/\\/ Left position relative to parent\\n        };\\n        return new Spinner(opts);\\n    }\\n\\n     function Popup(popup,container) {\\n        var thisPopup = this,\\n            timer,\\n            counter = 2,\\n            countDown = $(\\"#countDown\\").text(counter.toString());\\n\\n        thisPopup.setText = function(text) {\\n            popup.find(\'p\').html(text);\\n        };\\n\\n        thisPopup.load = function(counter, fadeTime) {\\n            counter = counter || 2;\\n            fadeTime = fadeTime || 150;\\n            container.animate({\\n                \\"opacity\\": \\"1\\"\\n            },fadeTime, function() {\\n                popup.fadeIn(fadeTime);\\n            });\\n\\n            container.off(\\"click\\").on(\\"click\\", function() {\\n                thisPopup.unload(fadeTime);\\n            });\\n\\n            $(\'#popupBoxClose\').off(\\"click\\").on(\\"click\\", function() {\\n                thisPopup.unload(fadeTime);\\n            });\\n\\n            timer = setInterval(function() {\\n                counter--;\\n                if(counter < 0) {\\n                    thisPopup.unload(fadeTime);\\n                }\\n            }, 500);\\n        };\\n\\n        thisPopup.unload = function(fadeTime) {\\n\\n            clearInterval(timer);\\n\\n            popup.fadeOut(fadeTime, function(){\\n                container.animate({\\n                    \\"opacity\\": \\"1\\"\\n                },fadeTime);\\n            });\\n        };\\n    }\\n\\n});\\n\\n<\\/script>\\n\\n","locked":0,"properties":"a:1:{s:8:\\"language\\";a:7:{s:4:\\"name\\";s:8:\\"language\\";s:4:\\"desc\\";s:13:\\"language_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:2:\\"en\\";s:7:\\"lexicon\\";s:25:\\"messagemanager:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","static":0,"static_file":"","content":"<script type=\\"text\\/javascript\\">\\n\\/**\\n * JS file for MessageManager extra\\n * \\n * Copyright 2015-2018 Bob Ray <https:\\/\\/bobsguides.com>\\n * Created on 01-27-2015\\n *\\n * MessageManager is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * MessageManager is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * MessageManager; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n * @package messagemanager\\n *\\/\\n\\n\\n\\n\\n\\/* *** Context Menu *** *\\/\\n$(function () {\\n    var myTable = $(\'table#the-node\');\\n    var myTextarea = $(\'#myTextarea\');\\n    var myUserList = $(\'#mm_userlist\');\\n    var mm_body = $(\\"body\\");\\n    var mm_new_message = $(\'#dlg_new_message\');\\n    var toNameField = $(\'span#mm_recipient\');\\n    var mmUsers = $(\'#mm_users\');\\n    var mt = myTextarea;\\n    var ul = myUserList;\\n    var ddl = $(\'#mm_dropdown_list\');\\n    var spinnerTarget = document.getElementsByTagName(\\"body\\")[0];\\n    var mmSpinner = createSpinner();\\n\\n    var pop = new Popup($(\\"#popup_box\\"), mm_body);\\n\\n    \\/* Display \\"No messages\\" if table is empty (except header row) *\\/\\n    checkEmpty();\\n\\n    $(\'#the-node\').contextMenu({\\n        \\/* selector: \'li\', *\\/\\n        selector: \'tr\',\\n        callback: function (key, options) {\\n            var id = getId($(this).attr(\'id\')) || null;\\n            switch (key) {\\n                case \'markunread\':\\n                    mmMarkUnread(id, mmLex(\'mm_no\'));\\n                    break;\\n                case \'delete\':\\n                    if (id === null) {\\n                        break;\\n                    }\\n                    promise7 = mmAjax(id, \'security\\/message\\/remove\', {});\\n                    mmSpinner.spin(spinnerTarget);\\n                    promise7.done(function (data) {\\n                        mmSpinner.stop();\\n                        $(\'tr#\' + id).remove();\\n                        $(\'tr#mm_message\' + id).remove();\\n                        $(\'tr#mm_sender_id\' + id).remove();\\n                        checkEmpty();\\n                        pop.setText(mmLex(\'mm_message_deleted\'));\\n                        pop.load(1);\\n                    });\\n                    break;\\n                case \'reply\':\\n                    mmReply(id);\\n                    break;\\n                case \'newmessage\':\\n                    mmReply(null, true);\\n                    break;\\n            }\\n        },\\n       items: {\\n\\n           \\"markunread\\": {name: \\"Mark Unread\\", icon: \\"markunread\\"},\\n           \\"delete\\": {name: \\"Delete\\", icon: \\"delete\\"},\\n           \\"reply\\": {name: \\"Reply\\", icon: \\"reply\\"},\\n           \\"newmessage\\": {name: \\"New Message\\", icon: \\"newmessage\\"},\\n           \\"sep1\\": \\"---------\\",\\n           \\"quit\\": {name: \\"Cancel\\", icon: \\"cancel\\"}\\n       }\\n   });\\n\\n    function clearDialog() {\\n        mt.val(\'\');\\n        ul.val(\'\');\\n        ul.hide();\\n        mt.hide();\\n        ddl.hide();\\n        mm_new_message.hide();\\n        toNameField.html(\'\');\\n        toNameField.hide();\\n        mmUsers.val(\'\');\\n        mmUsers.hide();\\n\\n    }\\n\\n    function checkEmpty() {\\n        if (myTable.find(\\"tr\\").length == 1) {\\n            $(myTable.append(\'<tr><td colspan=\\"5\\">\' + mmLex(\'mm_no_messages\') + \'<\\/td><\\/tr>\'));\\n        }\\n    }\\n\\n    function mmReply(id, newMessage) {\\n        newMessage = newMessage || null;\\n        if (id === null) {\\n            if (newMessage == null) {\\n                return false;\\n            }\\n        }\\n        var recipientId = null;\\n        var recipientType = null;\\n        \\/*var toNameField = $(\'span#mm_recipient\');\\n        var mmUsers = $(\'#mm_users\');\\n        var mt = myTextarea;\\n        var ul = myUserList;\\n        var ddl = $(\'#mm_dropdown_list\');*\\/\\n        ul.hide();\\n        toNameField.hide();\\n        var action = \'security\\/message\\/create\';\\n        var dlgSubjectObj = $(\\"#dlg_subject\\");\\n        var subject = \'\';\\n        if (id !== null) {\\n            subject = $.trim($(\'#mm_subject\' + id).html().replace(\\/<span[^>]*>.*<\\\\\\/span>\\/, \\"\\"));\\n            var replyPrefix = \\"[re:] \\";\\n            if (subject.indexOf(replyPrefix) == -1) {\\n                subject = replyPrefix + subject;\\n            }\\n        }\\n        dlgSubjectObj.val(subject);\\n\\n        var message = \'\';\\n        var myDialog = $(\\"#myDialog\\").dialog({\\n            autoOpen: false,\\n            maxWidth: 500,\\n            maxHeight: 400,\\n            width: 500,\\n            height: 400,\\n            modal: true,\\n            draggable: false,\\n            buttons: {\\n                \\"Quote\\": {\\n                    text: \\"Quote\\",\\n                    id: \\"mm_left_button\\",\\n                    class: \'mm_left_button\',\\n                    click: function() {\\n                        var originalMessageText = $(\\"#mm_message\\" + id).find(\'td:first\').html();\\n                        originalMessageText = originalMessageText.replace(\\/&lt;\\/g, \'<\');\\n                        originalMessageText = originalMessageText.replace(\\/&gt;\\/g, \'>\');\\n                        mt.val(\\"<< \\" + originalMessageText + \\" >>\\");\\n                    }\\n                },\\n\\n                \\"Cancel\\": function () {\\n                    clearDialog();\\n                    $(this).dialog(\\"close\\");\\n                },\\n                \\"Send\\": {\\n                    id: \'mm_button_send\',\\n                    text: \\"Send\\"\\n                }\\n            }\\n         });\\n\\n        if (newMessage !== null) { \\/* New Message *\\/\\n            document.forms[\'dlg_form\'].reset();\\n\\n\\n            var selectTypeOptions = $(\\"#dlg_select_type\\");\\n\\n            var groupId = null;\\n            myDialog.dialog(\'option\', \'title\', \'New Message\');\\n            mm_new_message.show();\\n            mt.hide();\\n            ddl.hide();\\n            \\/\\/ selectTypeOptions.find(\'option:first\').attr(\'selected\', \'selected\');\\n            \\/\\/ selectTypeOptions[0].selectedIndex = 0;\\n                       \\/\\/ selectTypeOptions.prepend(\'<option selected=\\"selected\\" value=\\"0\\"> Select Type <\\/option>\');\\n            selectTypeOptions.change(function () {\\n                var selection = this.value;\\n\\n                if (selection == 0) {\\n                    return false;\\n                }\\n                $(\\"#dlg_recipient_type\\").html(selection);\\n                recipientType = selection;\\n\\n                switch(selection) {\\n                    case \'user\':\\n                        ddl.hide();\\n                        mmSpinner.spin(spinnerTarget);\\n                        var promise1 = mmAjax(null, \'security\\/user\\/getlist\', {limit:0});\\n                        promise1.done(function (data) {\\n                            var results = data.data.results;\\n                            \\/\\/ var count = results.length;\\n                            var r = [], j = 0;\\n                            r[++j] = \'<div id=\\"mm_users\\"><h3>Select Recipient<\\/h3>\';\\n                            for (var key = 0, size = results.length; key < size; key++) {\\n                                r[++j] = \'<span id=\\"\' + results[key].id +\\n                                         \'\\" class=\\"mm_user\\">\';\\n\\n                                r[++j] = empty(results[key].fullname)\\n                                    ? results[key].username\\n                                    : results[key].fullname;\\n                                r[++j] = \'<\\/span>\';\\n                            }\\n                            r[++j] = \'<\\/div>\';\\n\\n                            mmUsers.html(r.join(\' \'));\\n                            mmUsers.show();\\n                            mmSpinner.stop();\\n                            $(\'span.mm_user\').on(\\"click\\", function (e) {\\n                                recipientId = e.target.id;\\n                                var recipientName = $(this).html();\\n                                if (recipientId == undefined) {\\n                                    e.preventDefault();\\n                                    e.stopPropagation();\\n                                    return;\\n                                }\\n                                toNameField.html(recipientName);\\n                                toNameField.show();\\n                                mmUsers.hide();\\n                                mt.show();\\n\\n\\n                            });\\n                        });\\n\\n                        break;\\n                    case \'usergroup\':\\n                        mmUsers.hide();\\n                        toNameField.hide();\\n                        mmSpinner.spin(spinnerTarget);\\n                        var promise = mmAjax(null, \'security\\/group\\/getlist\');\\n                        promise.done(function(data) {\\n                            var results = data.data.results;\\n                            var r = [], j = 0;\\n\\n                            for (var key = 0, size = results.length; key < size; key++) {\\n                                r[++j] = \'<option value=\\"\' + results[key].id + \'\\" class=\\"mm_user\\">\';\\n                                r[++j] = results[key].name;\\n                                r[++j] = \'<\\/option>\';\\n                            }\\n                            $(\'#mm_dropdown_select\').append(r.join(\' \'));\\n\\n\\n                            ddl.on(\\"click\\", function (e) {\\n                                groupId = e.target.value;\\n\\n                                if (groupId == 0) {\\n                                    e.preventDefault();\\n                                    e.stopPropagation();\\n                                    return;\\n                                }\\n\\n                                mt.show();\\n\\n\\n                            });\\n\\n                            ddl.show();\\n                        });\\n\\n                        break;\\n                    case \'all\':\\n                        mmUsers.hide();\\n                        toNameField.hide();\\n                        ddl.hide();\\n                        mt.show();\\n                        break;\\n                    default:\\n                        break;\\n                }\\n\\n            });\\n\\n            $(\'#mm_left_button\').hide();\\n            $(\\"#mm_button_send\\").unbind(\\"click\\").click(function () {\\n                message = $.trim(mt.val());\\n                if (message.length == 0) {\\n                    pop.setText(mmLex(\\"mm_empty_message\\"));\\n                    pop.load(20);\\n                } else {\\n                    subject = $(\'input#dlg_subject\').val();\\n\\n                    if (subject.length === 0) {\\n                        pop.setText(mmLex(\\"mm_empty_subject\\"));\\n                        pop.load(20);\\n                        return false;\\n                    }\\n\\n                    mmSpinner.spin(spinnerTarget);\\n                    switch(recipientType) {\\n                        case \'all\':\\n                           promise4 = mmAjax(null, \'security\\/message\\/create\', {\'type\':\'all\',\'subject\': subject,\'message\': message});\\n                            break;\\n\\n                        case \'user\':\\n                            promise4 = mmAjax(null, \'security\\/message\\/create\', {\'type\':\'user\',\'user\':recipientId,\'subject\':subject,\'message\':message});\\n                            break;\\n\\n                        case \'usergroup\':\\n                            promise4 = mmAjax(null, \'security\\/message\\/create\', {\'type\':\'usergroup\',\'group\':groupId,\'subject\': subject,\'message\': message});\\n                            break;\\n                    }\\n                    promise4.done(function (data) {\\n                        clearDialog();\\n                        mmSpinner.stop();\\n                        pop.setText(mmLex(\'mm_message_sent\'));\\n                        myDialog.dialog(\\"close\\");\\n                        pop.load();\\n                    });\\n                }\\n            });\\n        } else { \\/* Reply *\\/\\n            ul.hide();\\n            mt.show();\\n            recipientId = $(\'#mm_sender\' + id).html();\\n            $(\\"#mm_button_send\\").unbind(\\"click\\").click(function () {\\n                message = $.trim(mt.val());\\n                if (message.length == 0) {\\n                    pop.setText(mmLex(\\"mm_empty_message\\"));\\n                    pop.load(20);\\n                } else {\\n                    \\/\\/ alert(\'Clicked reply\');\\n                    subject = $(\'input#dlg_subject\').val();\\n                    if (subject.length === 0) {\\n                        pop.setText(mmLex(\'mm_empty_subject\'));\\n                        pop.load(20);\\n                        return false;\\n                    }\\n\\n                    mmSpinner.spin(spinnerTarget);\\n                    promise5 = mmAjax(id, action, {\'subject\': subject, \'message\': message, \'user\': recipientId});\\n                    promise5.done(function (data) {\\n\\n                        clearDialog();\\n                        mmSpinner.stop();\\n                        pop.setText(mmLex(\'mm_message_sent\'));\\n                        myDialog.dialog(\\"close\\");\\n                        pop.load();\\n                    });\\n                }\\n            });\\n        }\\n\\n        myDialog.dialog(\\"open\\");\\n\\n    }\\n\\n\\n    \\/* onClick function for subject field *\\/\\n    $(\\".mm_subject\\").on(\\"click\\", function() {\\n        var id = getId(this.id);\\n        var subject = $(\'#mm_message\' + id);\\n        if (subject.is(\\":visible\\")) {\\n            mmCloseSubject(subject, id);\\n        } else {\\n            mmOpenSubject(subject, id);\\n        }\\n    });\\n\\n    $(\\"#mm_submit_delete\\").on(\\"click\\", function (e) {\\n\\n        e.preventDefault();\\n        e.stopPropagation();\\n        mmSpinner.spin(spinnerTarget);\\n        $(\'input:checked\').each(function () {\\n            id = $(this).val();\\n            promise6 = mmAjax(id, \'security\\/message\\/remove\', {});\\n            $(\'tr#\' + id).remove();\\n            $(\'tr#mm_message\' + id).remove();\\n            $(\'tr#mm_sender_id\' + id).remove();\\n\\n        });\\n        \\/* Uncheck checkbox in header *\\/\\n        $(\\"#mm_check_all\\").prop(\\"checked\\", false);\\n\\n        promise6.done(function (data) {\\n            mmSpinner.stop();\\n            pop.setText(mmLex(\'mm_messages_deleted\'));\\n            pop.load();\\n\\n            \\/* Display \\"No messages\\" if table is empty (except header row) *\\/\\n            checkEmpty();\\n        });\\n    });\\n\\n\\n    function mmAjax(id, action, dataIn) {\\n        dataIn = dataIn || {};\\n        dataIn[\'id\'] = id;\\n        dataIn[\'action\'] = action;\\n\\n        \\/* Ajax call to action; calls MODX resource pseudo-connector *\\/\\n        return $.ajax({\\n            type: \\"POST\\",\\n            url: \\"mm-ajax[[+html_file_extension]]\\",\\n            data: dataIn,\\n            dataType: \\"json\\"\\n\\n        }).done(function () {\\n            mmSpinner.stop();\\n        }).fail(function (jqXHR, textStatus) {\\n            mmSpinner.stop();\\n            pop.setText(action + \' failed on message \' + id + \' \' + textStatus);\\n            pop.load(40);\\n        });\\n    }\\n\\n\\n    \\/* Pulls ID out of selector ID like \'mm_message12\' *\\/\\n    function getId(s) {\\n        if (s === undefined) {\\n            return null;\\n        }\\n        var number = s.match(\\/\\\\d+$\\/);\\n        number = parseInt(number, 10);\\n        return number\\n    }\\n\\n    \\/* Mark message read in DB and on screen *\\/\\n    function mmMarkRead(id, message) {\\n        var e = $(\'#mm_read\' + id);\\n\\n        if (e.html() == mmLex(\'mm_no\')) {\\n            e.html(mmLex(\'mm_yes\'));\\n            e.toggleClass(\\"Yes No\\");\\n            mmAjax(id, \'security\\/message\\/read\', {})\\n        }\\n    }\\n\\n    \\/* Mark message unread in DB and on screen;\\n     hide message if visible; change cursor to +\\n     *\\/\\n    function mmMarkUnread(id, message) {\\n        var read = $(\'#mm_read\' + id);\\n        if (read.html() === undefined) {\\n            return false;\\n        }\\n\\n        if (read.html() == mmLex(\'mm_yes\')) {\\n\\n            mmSpinner.spin(spinnerTarget);\\n            promise8 = mmAjax(id, \'security\\/message\\/unread\', {});\\n            promise8.done(function (data) {\\n                mmSpinner.stop();\\n                read.toggleClass(\\"Yes No\\");\\n                read.html(mmLex(\'mm_no\'));\\n            });\\n        }\\n        messageId = $(\'#mm_message\' + id);\\n        if (! messageId.is(\':hidden\')) {\\n            mmCloseSubject(messageId, id);\\n        }\\n\\n    }\\n\\n    \\/* Show message if hidden; mark read in DB and on screen;\\n     change down arrow to up arrow; change cursor to -\\n     *\\/\\n\\n    function mmOpenSubject(msg, id) {\\n        msg.show();\\n        msg.attr(\\"style\\", \\"display:table-row\\");\\n        var td = $(\'.mm_message\');\\n        td.attr(\'style\', \'display:table-cell\');\\n        td.attr(\'colspan\', \\"5\\");\\n        mmMarkRead(id, mmLex(\'mm_yes\'));\\n        $(\'#mm_expand\' + id).html(\'\\\\u25B4\');\\n        $(\'#mm_subject\' + id).toggleClass(\\"zoomin zoomout\\");\\n    }\\n\\n    \\/* Hide message if visible; change up arrow to down arrow *\\/\\n    function mmCloseSubject(msg, id) {\\n        msg.attr(\'colspan\', 5);\\n        msg.hide();\\n        $(\'#mm_expand\' + id).html(\'\\\\u25BE\');\\n        $(\'#mm_subject\' + id).toggleClass(\\"zoomin zoomout\\");\\n    }\\n\\n    $(function () {\\n        $(\\"#mm_check_all\\").change(function () {\\n            if (this.checked) {\\n                $(\'.mm_box\').prop(\\"checked\\", true);\\n            } else {\\n                $(\'.mm_box\').prop(\\"checked\\", false);\\n            }\\n        });\\n    });\\n\\n    function empty(data) {\\n        if (typeof(data) == \'number\' || typeof(data) == \'boolean\') {\\n            return false;\\n        }\\n        if (typeof(data) == \'undefined\' || data === null) {\\n            return true;\\n        }\\n        if (typeof(data.length) != \'undefined\') {\\n            return data.length == 0;\\n        }\\n        var count = 0;\\n        for (var i in data) {\\n            if (data.hasOwnProperty(i)) {\\n                count++;\\n            }\\n        }\\n        return count == 0;\\n    }\\n\\n    function createSpinner() {\\n        var opts = {\\n            lines: 17, \\/\\/ The number of lines to draw\\n            length: 17, \\/\\/ The length of each line\\n            width: 4, \\/\\/ The line thickness\\n            radius: 5, \\/\\/ The radius of the inner circle\\n            corners: 1, \\/\\/ Corner roundness (0..1)\\n            rotate: 0, \\/\\/ The rotation offset\\n            direction: 1, \\/\\/ 1: clockwise, -1: counterclockwise\\n            color: \'#56A717\', \\/\\/ #rgb or #rrggbb or array of colors\\n            speed: 0.6, \\/\\/ Rounds per second\\n            trail: 81, \\/\\/ Afterglow percentage\\n            shadow: false, \\/\\/ Whether to render a shadow\\n            hwaccel: false, \\/\\/ Whether to use hardware acceleration\\n            className: \'spinner\', \\/\\/ The CSS class to assign to the spinner\\n            zIndex: 2e9, \\/\\/ The z-index (defaults to 2000000000)\\n            top: \'50%\', \\/\\/ Top position relative to parent\\n            left: \'50%\' \\/\\/ Left position relative to parent\\n        };\\n        return new Spinner(opts);\\n    }\\n\\n     function Popup(popup,container) {\\n        var thisPopup = this,\\n            timer,\\n            counter = 2,\\n            countDown = $(\\"#countDown\\").text(counter.toString());\\n\\n        thisPopup.setText = function(text) {\\n            popup.find(\'p\').html(text);\\n        };\\n\\n        thisPopup.load = function(counter, fadeTime) {\\n            counter = counter || 2;\\n            fadeTime = fadeTime || 150;\\n            container.animate({\\n                \\"opacity\\": \\"1\\"\\n            },fadeTime, function() {\\n                popup.fadeIn(fadeTime);\\n            });\\n\\n            container.off(\\"click\\").on(\\"click\\", function() {\\n                thisPopup.unload(fadeTime);\\n            });\\n\\n            $(\'#popupBoxClose\').off(\\"click\\").on(\\"click\\", function() {\\n                thisPopup.unload(fadeTime);\\n            });\\n\\n            timer = setInterval(function() {\\n                counter--;\\n                if(counter < 0) {\\n                    thisPopup.unload(fadeTime);\\n                }\\n            }, 500);\\n        };\\n\\n        thisPopup.unload = function(fadeTime) {\\n\\n            clearInterval(timer);\\n\\n            popup.fadeOut(fadeTime, function(){\\n                container.animate({\\n                    \\"opacity\\": \\"1\\"\\n                },fadeTime);\\n            });\\n        };\\n    }\\n\\n});\\n\\n<\\/script>\\n\\n"}',
        'guid' => '962f48c471f702f022333013aa059a02',
        'native_key' => 3,
        'signature' => '51c02b209ab1a99abf21f2a7dbe5c48e',
      ),
    ),
    'Snippets' => 
    array (
      'f11b5561fd323f110b2fb69c10cbc214' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"MessageManager","description":"MessageManager snippet","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * MessageManager snippet for MessageManager extra\\n *\\n * Copyright 2015-2018 by Bob Ray <http:\\/\\/bobsguides.com>\\n * Created on 01-26-2015\\n *\\n * MessageManager is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * MessageManager is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * MessageManager; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package messagemanager\\n *\\/\\n\\n\\/**\\n * Description\\n * -----------\\n * MessageManager snippet\\n *\\n * Usage\\n * -----\\n * [[!MessageManager]]\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * @package messagemanager\\n **\\/\\n\\n\\/** Properties\\n\\n * @property &recipient_options textfield -- Options for sending messages; these options show up in the dropdown list when sending a new message; you must include at least one option; Default: user,usergroup,all.\\n *\\n * @property &redirect_to textfield -- Id of Resource to redirect to if user is not logged in (e.g. the Login page); If this is not set, MessageManager will redirect to the Login page if its pagetitle is Login, or the site_start page if not; Default: (empty)..\\n *\\n * @property &allowed_groups textfield -- Comma-separated list of User Group names or IDs that are allowed to access MessageManager; if empty all groups are allowed; Default: (empty)..\\n *\\/\\n \\n$version = \'?v=1.0.1-rc\'; \\n\\n$assets_path = $modx->getOption(\'mm.assets_path\', NULL, $modx->getOption(\'assets_path\') .\\n    \'components\\/messagemanager\\/\');\\n$assets_url = $modx->getOption(\'mm.assets_url\', NULL, $modx->getOption(\'assets_url\') .\\n    \'components\\/messagemanager\\/\');\\n\\n\\/* Load lexicon string *\\/\\n$language = $modx->getOption(\'language\', $scriptProperties, $modx->getOption(\'culture_key\'));\\n$language = empty($language) ? \'en\' : $language;\\n$modx->lexicon->load($language . \':messagemanager:default\');\\n$lex = $modx->lexicon->getFileTopic($language, \'messagemanager\', \'default\');\\n$jsonLex = $modx->toJSON($lex);\\n$aaLex = file_get_contents($assets_path . \'js\\/aalexicon.txt\');\\n$aaLex = str_replace(\'[[+mm_lexicon]]\', $jsonLex, $aaLex);\\n$modx->regClientStartupScript($aaLex);\\n\\n\\/* Load JQuery *\\/\\n\\n\\n$modx->regClientStartupScript(\'\\/\\/ajax.googleapis.com\\/ajax\\/libs\\/jquery\\/1.12.1\\/jquery.min.js\\"\');    \\n$modx->regClientCSS(\'\\/\\/ajax.googleapis.com\\/ajax\\/libs\\/jqueryui\\/1.12.1\\/themes\\/base\\/jquery-ui.css\');\\n$modx->regClientStartupScript(\'\\/\\/ajax.googleapis.com\\/ajax\\/libs\\/jqueryui\\/1.12.1\\/jquery-ui.min.js\');\\n\\n\\/* Load local JS and CSS *\\/\\n\\n$modx->regClientStartupScript($assets_url . \'js\\/context-menu.js\');\\n$modx->regClientStartupScript($assets_url . \'js\\/spin-min.js\');\\n\\/\\/ $modx->regClientStartupScript($assets_url . \'js\\/jquery-ui.min.js\');\\n\\/\\/ $modx->regClientCSS($assets_url . \'css\\/jquery\\/jquery-ui.min.css\');\\n$cssFile = $modx->getOption(\'cssFile\', $scriptProperties, \'messagemanager.css\') . $version;\\n$path = $assets_url . \'css\\/\' . $cssFile;\\n$modx->regClientCSS($path);\\n\\n\\/* load MessageManager JS from chunk *\\/\\n$contentType = $modx->getObject(\'modContentType\', array(\'mime_type\' => \'text\\/html\'));\\n\\nif (!$contentType) {\\n    $modx->log(modX::LOG_LEVEL_ERROR, \'[MessageManager] could not get content type with mime_type: \\"text\\/html\\"\');\\n} else {\\n    $fields = array(\\n        \'html_file_extension\' => $contentType->get(\'file_extensions\'),\\n    );\\n    $jsChunk = $modx->getOption(\'jsChunk\', $scriptProperties, \'mmAjaxJs\', true);\\n    $modx->regClientStartupScript($modx->getChunk($jsChunk, $fields));\\n}\\n\\n\\n\\/* Forward to redirect_to resource if user is not logged in *\\/\\nif ( (!$modx->user->hasSessionContext($modx->context->get(\'key\')))) {\\n    $redirectToId = $modx->getOption(\'redirect_to\', $scriptProperties, null, true);\\n    if ($redirectToId === null) {\\n        \\/* Try to find the Login page *\\/\\n        $query = $modx->newQuery(\'modResource\', array(\\n            \'pagetitle\' => \'Login\',\\n        ));\\n        $query->select(\'id\');\\n        $redirectToId =  $modx->getValue($query->prepare());\\n        \\/* Use site_start as default *\\/\\n        $redirectToId = empty($redirectToId)\\n            ? $modx->getOption(\'site_start\', null)\\n            : $redirectToId;\\n    }\\n    $url = $modx->makeUrl($redirectToId, \\"\\", \\"\\", \\"full\\");\\n    $modx->sendRedirect($url);\\n}\\n\\n$allowedGroups = $modx->getOption(\'allowed_groups\', $scriptProperties, \'\', true);\\n\\nif (!empty($allowedGroups)) {\\n    $allowedGroups = explode(\',\', $allowedGroups);\\n    if (! $modx->user->isMember($allowedGroups)) {\\n        return $modx->lexicon(\'mm_unauthorized\');\\n    }\\n}\\n\\n\\/* Display messages *\\/\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'messageTpl\');\\n$outerTpl = $modx->getOption(\'outerTpl\', $scriptProperties, \'messageOuterTpl\');\\n$uid = $modx->user->get(\'id\');\\n\\/\\/ echo \\"<p>UserId: \\" . $uid;\\n$c = $modx->newQuery(\'modUserMessage\');\\n$c->sortby(\'date_sent\', \'DESC\');\\n$c->where(\\n   array(\'recipient\' => $uid\\n   )\\n);\\n$messages = $modx->getCollection(\'modUserMessage\', $c);\\n$count = !empty($messages) ? count($messages) : \'no\';\\n$modx->setPlaceholder(\'messageCount\', $count);\\n$modx->setPlaceholder(\'message_count\', count($messages));\\n\\n$rOptions = \'user,usergroup,all\';\\n\\n$recipientOptions = $modx->getOption(\'recipient_options\', $scriptProperties, $rOptions, true);\\n$optionArray = explode(\',\', $recipientOptions);\\n$optionArray = array_map(\'trim\', $optionArray);\\n$finalOptions = \\"\\\\n\\" . \' <option value = \\"0\\" > Select One <\\/option > \';\\nforeach($optionArray as $opt) {\\n    $finalOptions .= \\"\\\\n    \\" . \'<option value=\\"\' . $opt . \'\\">\' .\\n        $modx->lexicon(\'mm_\' . $opt) . \'<\\/option>\';\\n}\\n\\n\\n$output = $modx->getChunk($outerTpl);\\n$output = str_replace(\'[[+recipient_options]]\', $finalOptions, $output);\\n\\nforeach ($messages as $message) {\\n    \\/** @var $message xPDOObject *\\/\\n    $fields = $message->toArray (\'mm.\', true);\\n    $query = $modx->newQuery(\'modUser\', array(\\n        \'id\' => $fields[\'mm.sender\'],\\n    ));\\n    $query->select(\'username\');\\n    $username = $modx->getValue($query->prepare());\\n    $fields[\'mm.sender_id\'] = $fields[\'mm.sender\'];\\n    $fields[\'mm.sender\'] = $username;\\n    $fields[\'mm.class\'] = $fields[\'mm.read\']? \'read\' : \'unread\';\\n    $fields[\'mm.read_indicator\'] = $fields[\'mm.read\'] ? \'Yes\' : \'No\';\\n    $fields[\'mm.read\'] = $fields[\'mm.read\']\\n        ? $modx->lexicon(\'mm_yes\')\\n        : $modx->lexicon(\'mm_no\');\\n\\n    $inner .= $modx->getChunk($tpl, $fields);\\n}\\n\\n$output = str_replace(\'[[+messages]]\', $inner, $output);\\n\\nreturn $output;","locked":0,"properties":"a:8:{s:14:\\"allowed_groups\\";a:7:{s:4:\\"name\\";s:14:\\"allowed_groups\\";s:4:\\"desc\\";s:19:\\"allowed_groups_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:25:\\"messagemanager:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"cssFile\\";a:7:{s:4:\\"name\\";s:7:\\"cssFile\\";s:4:\\"desc\\";s:12:\\"cssFile_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:18:\\"messagemanager.css\\";s:7:\\"lexicon\\";s:25:\\"messagemanager:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"jsChunk\\";a:7:{s:4:\\"name\\";s:7:\\"jsChunk\\";s:4:\\"desc\\";s:12:\\"jsChunk_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:8:\\"mmAjaxJS\\";s:7:\\"lexicon\\";s:25:\\"messagemanager:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"language\\";a:7:{s:4:\\"name\\";s:8:\\"language\\";s:4:\\"desc\\";s:13:\\"language_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:2:\\"en\\";s:7:\\"lexicon\\";s:25:\\"messagemanager:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"outerTpl\\";a:7:{s:4:\\"name\\";s:8:\\"outerTpl\\";s:4:\\"desc\\";s:13:\\"outerTpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:15:\\"MessageOuterTpl\\";s:7:\\"lexicon\\";s:25:\\"messagemanager:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:17:\\"recipient_options\\";a:7:{s:4:\\"name\\";s:17:\\"recipient_options\\";s:4:\\"desc\\";s:25:\\"mm_recipient_options_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:18:\\"user,usergroup,all\\";s:7:\\"lexicon\\";s:25:\\"messagemanager:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"redirect_to\\";a:7:{s:4:\\"name\\";s:11:\\"redirect_to\\";s:4:\\"desc\\";s:16:\\"redirect_to_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:25:\\"messagemanager:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:3:\\"tpl\\";a:7:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:8:\\"tpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:10:\\"MessageTpl\\";s:7:\\"lexicon\\";s:25:\\"messagemanager:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * MessageManager snippet for MessageManager extra\\n *\\n * Copyright 2015-2018 by Bob Ray <http:\\/\\/bobsguides.com>\\n * Created on 01-26-2015\\n *\\n * MessageManager is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * MessageManager is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * MessageManager; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package messagemanager\\n *\\/\\n\\n\\/**\\n * Description\\n * -----------\\n * MessageManager snippet\\n *\\n * Usage\\n * -----\\n * [[!MessageManager]]\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * @package messagemanager\\n **\\/\\n\\n\\/** Properties\\n\\n * @property &recipient_options textfield -- Options for sending messages; these options show up in the dropdown list when sending a new message; you must include at least one option; Default: user,usergroup,all.\\n *\\n * @property &redirect_to textfield -- Id of Resource to redirect to if user is not logged in (e.g. the Login page); If this is not set, MessageManager will redirect to the Login page if its pagetitle is Login, or the site_start page if not; Default: (empty)..\\n *\\n * @property &allowed_groups textfield -- Comma-separated list of User Group names or IDs that are allowed to access MessageManager; if empty all groups are allowed; Default: (empty)..\\n *\\/\\n \\n$version = \'?v=1.0.1-rc\'; \\n\\n$assets_path = $modx->getOption(\'mm.assets_path\', NULL, $modx->getOption(\'assets_path\') .\\n    \'components\\/messagemanager\\/\');\\n$assets_url = $modx->getOption(\'mm.assets_url\', NULL, $modx->getOption(\'assets_url\') .\\n    \'components\\/messagemanager\\/\');\\n\\n\\/* Load lexicon string *\\/\\n$language = $modx->getOption(\'language\', $scriptProperties, $modx->getOption(\'culture_key\'));\\n$language = empty($language) ? \'en\' : $language;\\n$modx->lexicon->load($language . \':messagemanager:default\');\\n$lex = $modx->lexicon->getFileTopic($language, \'messagemanager\', \'default\');\\n$jsonLex = $modx->toJSON($lex);\\n$aaLex = file_get_contents($assets_path . \'js\\/aalexicon.txt\');\\n$aaLex = str_replace(\'[[+mm_lexicon]]\', $jsonLex, $aaLex);\\n$modx->regClientStartupScript($aaLex);\\n\\n\\/* Load JQuery *\\/\\n\\n\\n$modx->regClientStartupScript(\'\\/\\/ajax.googleapis.com\\/ajax\\/libs\\/jquery\\/1.12.1\\/jquery.min.js\\"\');    \\n$modx->regClientCSS(\'\\/\\/ajax.googleapis.com\\/ajax\\/libs\\/jqueryui\\/1.12.1\\/themes\\/base\\/jquery-ui.css\');\\n$modx->regClientStartupScript(\'\\/\\/ajax.googleapis.com\\/ajax\\/libs\\/jqueryui\\/1.12.1\\/jquery-ui.min.js\');\\n\\n\\/* Load local JS and CSS *\\/\\n\\n$modx->regClientStartupScript($assets_url . \'js\\/context-menu.js\');\\n$modx->regClientStartupScript($assets_url . \'js\\/spin-min.js\');\\n\\/\\/ $modx->regClientStartupScript($assets_url . \'js\\/jquery-ui.min.js\');\\n\\/\\/ $modx->regClientCSS($assets_url . \'css\\/jquery\\/jquery-ui.min.css\');\\n$cssFile = $modx->getOption(\'cssFile\', $scriptProperties, \'messagemanager.css\') . $version;\\n$path = $assets_url . \'css\\/\' . $cssFile;\\n$modx->regClientCSS($path);\\n\\n\\/* load MessageManager JS from chunk *\\/\\n$contentType = $modx->getObject(\'modContentType\', array(\'mime_type\' => \'text\\/html\'));\\n\\nif (!$contentType) {\\n    $modx->log(modX::LOG_LEVEL_ERROR, \'[MessageManager] could not get content type with mime_type: \\"text\\/html\\"\');\\n} else {\\n    $fields = array(\\n        \'html_file_extension\' => $contentType->get(\'file_extensions\'),\\n    );\\n    $jsChunk = $modx->getOption(\'jsChunk\', $scriptProperties, \'mmAjaxJs\', true);\\n    $modx->regClientStartupScript($modx->getChunk($jsChunk, $fields));\\n}\\n\\n\\n\\/* Forward to redirect_to resource if user is not logged in *\\/\\nif ( (!$modx->user->hasSessionContext($modx->context->get(\'key\')))) {\\n    $redirectToId = $modx->getOption(\'redirect_to\', $scriptProperties, null, true);\\n    if ($redirectToId === null) {\\n        \\/* Try to find the Login page *\\/\\n        $query = $modx->newQuery(\'modResource\', array(\\n            \'pagetitle\' => \'Login\',\\n        ));\\n        $query->select(\'id\');\\n        $redirectToId =  $modx->getValue($query->prepare());\\n        \\/* Use site_start as default *\\/\\n        $redirectToId = empty($redirectToId)\\n            ? $modx->getOption(\'site_start\', null)\\n            : $redirectToId;\\n    }\\n    $url = $modx->makeUrl($redirectToId, \\"\\", \\"\\", \\"full\\");\\n    $modx->sendRedirect($url);\\n}\\n\\n$allowedGroups = $modx->getOption(\'allowed_groups\', $scriptProperties, \'\', true);\\n\\nif (!empty($allowedGroups)) {\\n    $allowedGroups = explode(\',\', $allowedGroups);\\n    if (! $modx->user->isMember($allowedGroups)) {\\n        return $modx->lexicon(\'mm_unauthorized\');\\n    }\\n}\\n\\n\\/* Display messages *\\/\\n$tpl = $modx->getOption(\'tpl\', $scriptProperties, \'messageTpl\');\\n$outerTpl = $modx->getOption(\'outerTpl\', $scriptProperties, \'messageOuterTpl\');\\n$uid = $modx->user->get(\'id\');\\n\\/\\/ echo \\"<p>UserId: \\" . $uid;\\n$c = $modx->newQuery(\'modUserMessage\');\\n$c->sortby(\'date_sent\', \'DESC\');\\n$c->where(\\n   array(\'recipient\' => $uid\\n   )\\n);\\n$messages = $modx->getCollection(\'modUserMessage\', $c);\\n$count = !empty($messages) ? count($messages) : \'no\';\\n$modx->setPlaceholder(\'messageCount\', $count);\\n$modx->setPlaceholder(\'message_count\', count($messages));\\n\\n$rOptions = \'user,usergroup,all\';\\n\\n$recipientOptions = $modx->getOption(\'recipient_options\', $scriptProperties, $rOptions, true);\\n$optionArray = explode(\',\', $recipientOptions);\\n$optionArray = array_map(\'trim\', $optionArray);\\n$finalOptions = \\"\\\\n\\" . \' <option value = \\"0\\" > Select One <\\/option > \';\\nforeach($optionArray as $opt) {\\n    $finalOptions .= \\"\\\\n    \\" . \'<option value=\\"\' . $opt . \'\\">\' .\\n        $modx->lexicon(\'mm_\' . $opt) . \'<\\/option>\';\\n}\\n\\n\\n$output = $modx->getChunk($outerTpl);\\n$output = str_replace(\'[[+recipient_options]]\', $finalOptions, $output);\\n\\nforeach ($messages as $message) {\\n    \\/** @var $message xPDOObject *\\/\\n    $fields = $message->toArray (\'mm.\', true);\\n    $query = $modx->newQuery(\'modUser\', array(\\n        \'id\' => $fields[\'mm.sender\'],\\n    ));\\n    $query->select(\'username\');\\n    $username = $modx->getValue($query->prepare());\\n    $fields[\'mm.sender_id\'] = $fields[\'mm.sender\'];\\n    $fields[\'mm.sender\'] = $username;\\n    $fields[\'mm.class\'] = $fields[\'mm.read\']? \'read\' : \'unread\';\\n    $fields[\'mm.read_indicator\'] = $fields[\'mm.read\'] ? \'Yes\' : \'No\';\\n    $fields[\'mm.read\'] = $fields[\'mm.read\']\\n        ? $modx->lexicon(\'mm_yes\')\\n        : $modx->lexicon(\'mm_no\');\\n\\n    $inner .= $modx->getChunk($tpl, $fields);\\n}\\n\\n$output = str_replace(\'[[+messages]]\', $inner, $output);\\n\\nreturn $output;"}',
        'guid' => 'fa5bd8aed80c9b735e159bd63f96ba06',
        'native_key' => 1,
        'signature' => '0d604b8d70fba29123348df51d2fc3d2',
      ),
      'b30090ca241f023b2fc4fd574a546215' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"mmAjax","description":"MessageManager ajax connector snippet","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/** \\n * mmAjax snippet for MessageManager extra\\n *\\n * Copyright 2015-2018 by Bob Ray <http:\\/\\/bobsguides.com>\\n * Created on 01-29-2015\\n *\\n * MessageManager is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * MessageManager is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * MessageManager; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package messagemanager\\n *\\/\\n\\n\\/**\\n * Description\\n * -----------\\n * MessageManager ajax connector snippet\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * @package messagemanager\\n **\\/\\n\\n\\/** Properties\\n\\n * @property &exclude_groups textfield -- Comma-separated list of User Group IDs or names that can not be sent bulk messages; if empty all user groups can be sent messages; Default: empty.\\n *\\n * @property &user_group textfield -- User Group ID or name that has opted to receive messages; if empty, all users can be sent a message; Default: empty.\\n *\\/\\n\\nif (! function_exists(\'my_debug\')) {\\n    function my_debug($msg, $modx, $clear = false) {\\n        \\/** @var $chunk modChunk *\\/\\n        \\/** @var $modx modX *\\/\\n        $content = \'\';\\n        $chunk = $modx->getObject(\'modChunk\', array(\'name\' => \'Debug\'));\\n        if (! $clear) {\\n            $content = $chunk->getContent();\\n        }\\n\\n        $chunk->setContent($content . \\"\\\\n\\" .  $msg);\\n        $chunk->save();\\n    }\\n}\\n\\nif (!function_exists(\'getGroupId\')) {\\n    function getGroupId($group) {\\n        global $modx;\\n        if (! is_numeric(substr($group, 0, 1))) {\\n            $key = \'name\';\\n        } else {\\n            $key = \'id\';\\n        }\\n        $query = $modx->newQuery(\'modUserGroup\', array(\\n            $key => $group,\\n        ));\\n        $query->select(\'id\');\\n        return $modx->getValue($query->prepare());\\n    }\\n\\n}\\n\\nif (!$modx->hasPermission(\'messages\')) {\\n    $retVal = array(\\n        \'success\'       => false,\\n        \'error_message\' => $modx->lexicon(\'permission_denied\'),\\n    );\\n\\n    return $modx->toJSON($retVal);\\n}\\n\\n\\n$validActions =  \'security\\/message\\/remove,security\\/message\\/read,security\\/message\\/unread,security\\/message\\/create,security\\/user\\/getlist,security\\/group\\/getlist\';\\n\\n\\n$validActions = $modx->getOption (\'validActions\', $scriptProperties, $validActions, true);\\n$validActions = explode(\',\', $validActions);\\n$validActions = array_map(\'trim\', $validActions);\\n\\nif (isset($_REQUEST) && !empty($_REQUEST)) {\\n    $action = $modx->getOption(\'action\', $_REQUEST, \'\');\\n    if (! empty($action)) {\\n        unset($_REQUEST[\'action\']);\\n    }\\n\\n    if (! in_array($action, $validActions, true)) {\\n        $retVal = array(\\n            \'success\'       => false,\\n            \'error_message\' => \'Invalid Action\',\\n        );\\n        return $modx->toJSON($retVal);\\n\\n    }\\n    $props = $modx::sanitize($_REQUEST, $modx->sanitizePatterns);\\n\\n    $userGroup = $modx->getOption(\'user_group\', $scriptProperties, \'\', true);\\n    $userGroup = getGroupId($userGroup);\\n    $type = $modx->getOption(\'type\', $_REQUEST, \'\', true);\\n\\n    if ($action === \'security\\/user\\/getlist\') {\\n        if (!empty($userGroup)) {\\n            $props[\'usergroup\'] = $userGroup;\\n        }\\n        unset($userGroup);\\n    }\\n\\n    if ($action === \'security\\/message\\/create\') {\\n        if ((!empty($userGroup)) && $type == \'all\' ) {\\n            \\/* Bypass processor to send only to user group *\\/\\n\\n            $c = $modx->newQuery(\'modUserGroupMember\');\\n            $c->where(array(\\n                 \'user_group\' => $userGroup,\\n            ));\\n\\n            $members = $modx->getCollection(\'modUserGroupMember\', $c);\\n            $subject = $modx->getOption(\'subject\', $_REQUEST, \'No Subject\');\\n            $messagetext = $modx->getOption(\'message\', $_REQUEST, \'No Message\');\\n            $sender = $modx->user->get(\'id\');\\n\\n            foreach ($members as $member) {\\n                \\/** @var $member modUserGroupMember *\\/\\n                $message = $modx->newObject(\'modUserMessage\');\\n                $message->set(\'recipient\', $member->get(\'member\'));\\n                $message->set(\'sender\', $sender);\\n                $message->set(\'subject\', $subject);\\n                $message->set(\'message\', $messagetext);\\n                $message->set(\'date_sent\', time());\\n                $message->set(\'private\', false);\\n                @$message->save();\\n\\n            }\\n            $retVal = array(\\n                \'success\' => true,\\n            );\\n\\n            return $modx->toJSON($retVal);\\n\\n        }\\n    }\\n\\n    if ($action === \'security\\/group\\/getlist\') {\\n        $exGroups = $modx->getOption(\'exclude_groups\', $scriptProperties, \'\', true);\\n        $temp = array();\\n\\n        if (!empty($userGroup)) {\\n            $grps = $modx->getCollection(\'modUserGroup\');\\n\\n            foreach($grps as $grp) {\\n                \\/** @var $grp modUserGroup *\\/\\n                if ($grp->get(\'id\') == $userGroup) {\\n                    continue;\\n                }\\n                $temp[] = $grp->get(\'id\');\\n            }\\n            if (!empty($temp)) {\\n                $props[\'exclude\'] = implode(\',\', $temp);\\n            }\\n\\n        } elseif (!empty($exGroups)) {\\n            $exGroups = explode(\',\', $exGroups);\\n            foreach($exGroups as $exGroup) {\\n                $v = getGroupId($exGroup);\\n                if (! empty($v)) {\\n                    $temp[] = $v;\\n                }\\n            }\\n            if (!empty($temp)) {\\n                $props[\'exclude\'] = implode(\',\', $temp);\\n            }\\n        }\\n        unset($exGroups, $exGroup, $grps, $grp, $v, $temp);\\n    }\\n\\n\\n    \\/* @var $response modProcessorResponse *\\/\\n    $response =  $modx->runProcessor($action, $props);\\n\\n    if ($response->isError()) {\\n        if ($response->hasFieldErrors()) {\\n            $fieldErrors = $response->getAllErrors();\\n            $errorMessage = implode(\\"\\\\n\\", $fieldErrors);\\n        } else {\\n            $errorMessage = \'An error occurred: \' . $response->getMessage();\\n        }\\n        $retVal = array(\\n            \'success\' => false,\\n            \'error_message\' => $errorMessage,\\n        );\\n    } else {\\n        $retVal = array(\\n            \'success\' => true,\\n        );\\n        if (isset($response->response)) {\\n            $retVal[\'data\'] =& $modx->fromJSON($response->response);\\n            if ($action == \'security\\/user\\/getlist\') {\\n                $users =& $retVal[\'data\'][\'results\'];\\n                foreach ($users as &$user) {\\n                    unset($user[\'class_key\'], $user[\'remote_key\'], $user[\'remote_data\'],\\n                        $user[\'hash_class\'], $user[\'session_stale\'], $user[\'email\'], $user[\'cls\'],\\n                        $user[\'sudo\'], $user[\'active\'], $user[\'blocked\'], $user[\'primary_group\']);\\n                }\\n            }\\n        }\\n    }\\n\\n} else {\\n    $retVal =  array(\\n        \'success\' => false,\\n        \'error_message\' => \'Empty Request\',\\n    );\\n}\\n\\nreturn $modx->toJSON($retVal);","locked":0,"properties":"a:2:{s:14:\\"exclude_groups\\";a:7:{s:4:\\"name\\";s:14:\\"exclude_groups\\";s:4:\\"desc\\";s:22:\\"mm_exclude_groups_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:25:\\"messagemanager:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"user_group\\";a:7:{s:4:\\"name\\";s:10:\\"user_group\\";s:4:\\"desc\\";s:18:\\"mm_user_group_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:25:\\"messagemanager:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/** \\n * mmAjax snippet for MessageManager extra\\n *\\n * Copyright 2015-2018 by Bob Ray <http:\\/\\/bobsguides.com>\\n * Created on 01-29-2015\\n *\\n * MessageManager is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * MessageManager is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * MessageManager; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package messagemanager\\n *\\/\\n\\n\\/**\\n * Description\\n * -----------\\n * MessageManager ajax connector snippet\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * @package messagemanager\\n **\\/\\n\\n\\/** Properties\\n\\n * @property &exclude_groups textfield -- Comma-separated list of User Group IDs or names that can not be sent bulk messages; if empty all user groups can be sent messages; Default: empty.\\n *\\n * @property &user_group textfield -- User Group ID or name that has opted to receive messages; if empty, all users can be sent a message; Default: empty.\\n *\\/\\n\\nif (! function_exists(\'my_debug\')) {\\n    function my_debug($msg, $modx, $clear = false) {\\n        \\/** @var $chunk modChunk *\\/\\n        \\/** @var $modx modX *\\/\\n        $content = \'\';\\n        $chunk = $modx->getObject(\'modChunk\', array(\'name\' => \'Debug\'));\\n        if (! $clear) {\\n            $content = $chunk->getContent();\\n        }\\n\\n        $chunk->setContent($content . \\"\\\\n\\" .  $msg);\\n        $chunk->save();\\n    }\\n}\\n\\nif (!function_exists(\'getGroupId\')) {\\n    function getGroupId($group) {\\n        global $modx;\\n        if (! is_numeric(substr($group, 0, 1))) {\\n            $key = \'name\';\\n        } else {\\n            $key = \'id\';\\n        }\\n        $query = $modx->newQuery(\'modUserGroup\', array(\\n            $key => $group,\\n        ));\\n        $query->select(\'id\');\\n        return $modx->getValue($query->prepare());\\n    }\\n\\n}\\n\\nif (!$modx->hasPermission(\'messages\')) {\\n    $retVal = array(\\n        \'success\'       => false,\\n        \'error_message\' => $modx->lexicon(\'permission_denied\'),\\n    );\\n\\n    return $modx->toJSON($retVal);\\n}\\n\\n\\n$validActions =  \'security\\/message\\/remove,security\\/message\\/read,security\\/message\\/unread,security\\/message\\/create,security\\/user\\/getlist,security\\/group\\/getlist\';\\n\\n\\n$validActions = $modx->getOption (\'validActions\', $scriptProperties, $validActions, true);\\n$validActions = explode(\',\', $validActions);\\n$validActions = array_map(\'trim\', $validActions);\\n\\nif (isset($_REQUEST) && !empty($_REQUEST)) {\\n    $action = $modx->getOption(\'action\', $_REQUEST, \'\');\\n    if (! empty($action)) {\\n        unset($_REQUEST[\'action\']);\\n    }\\n\\n    if (! in_array($action, $validActions, true)) {\\n        $retVal = array(\\n            \'success\'       => false,\\n            \'error_message\' => \'Invalid Action\',\\n        );\\n        return $modx->toJSON($retVal);\\n\\n    }\\n    $props = $modx::sanitize($_REQUEST, $modx->sanitizePatterns);\\n\\n    $userGroup = $modx->getOption(\'user_group\', $scriptProperties, \'\', true);\\n    $userGroup = getGroupId($userGroup);\\n    $type = $modx->getOption(\'type\', $_REQUEST, \'\', true);\\n\\n    if ($action === \'security\\/user\\/getlist\') {\\n        if (!empty($userGroup)) {\\n            $props[\'usergroup\'] = $userGroup;\\n        }\\n        unset($userGroup);\\n    }\\n\\n    if ($action === \'security\\/message\\/create\') {\\n        if ((!empty($userGroup)) && $type == \'all\' ) {\\n            \\/* Bypass processor to send only to user group *\\/\\n\\n            $c = $modx->newQuery(\'modUserGroupMember\');\\n            $c->where(array(\\n                 \'user_group\' => $userGroup,\\n            ));\\n\\n            $members = $modx->getCollection(\'modUserGroupMember\', $c);\\n            $subject = $modx->getOption(\'subject\', $_REQUEST, \'No Subject\');\\n            $messagetext = $modx->getOption(\'message\', $_REQUEST, \'No Message\');\\n            $sender = $modx->user->get(\'id\');\\n\\n            foreach ($members as $member) {\\n                \\/** @var $member modUserGroupMember *\\/\\n                $message = $modx->newObject(\'modUserMessage\');\\n                $message->set(\'recipient\', $member->get(\'member\'));\\n                $message->set(\'sender\', $sender);\\n                $message->set(\'subject\', $subject);\\n                $message->set(\'message\', $messagetext);\\n                $message->set(\'date_sent\', time());\\n                $message->set(\'private\', false);\\n                @$message->save();\\n\\n            }\\n            $retVal = array(\\n                \'success\' => true,\\n            );\\n\\n            return $modx->toJSON($retVal);\\n\\n        }\\n    }\\n\\n    if ($action === \'security\\/group\\/getlist\') {\\n        $exGroups = $modx->getOption(\'exclude_groups\', $scriptProperties, \'\', true);\\n        $temp = array();\\n\\n        if (!empty($userGroup)) {\\n            $grps = $modx->getCollection(\'modUserGroup\');\\n\\n            foreach($grps as $grp) {\\n                \\/** @var $grp modUserGroup *\\/\\n                if ($grp->get(\'id\') == $userGroup) {\\n                    continue;\\n                }\\n                $temp[] = $grp->get(\'id\');\\n            }\\n            if (!empty($temp)) {\\n                $props[\'exclude\'] = implode(\',\', $temp);\\n            }\\n\\n        } elseif (!empty($exGroups)) {\\n            $exGroups = explode(\',\', $exGroups);\\n            foreach($exGroups as $exGroup) {\\n                $v = getGroupId($exGroup);\\n                if (! empty($v)) {\\n                    $temp[] = $v;\\n                }\\n            }\\n            if (!empty($temp)) {\\n                $props[\'exclude\'] = implode(\',\', $temp);\\n            }\\n        }\\n        unset($exGroups, $exGroup, $grps, $grp, $v, $temp);\\n    }\\n\\n\\n    \\/* @var $response modProcessorResponse *\\/\\n    $response =  $modx->runProcessor($action, $props);\\n\\n    if ($response->isError()) {\\n        if ($response->hasFieldErrors()) {\\n            $fieldErrors = $response->getAllErrors();\\n            $errorMessage = implode(\\"\\\\n\\", $fieldErrors);\\n        } else {\\n            $errorMessage = \'An error occurred: \' . $response->getMessage();\\n        }\\n        $retVal = array(\\n            \'success\' => false,\\n            \'error_message\' => $errorMessage,\\n        );\\n    } else {\\n        $retVal = array(\\n            \'success\' => true,\\n        );\\n        if (isset($response->response)) {\\n            $retVal[\'data\'] =& $modx->fromJSON($response->response);\\n            if ($action == \'security\\/user\\/getlist\') {\\n                $users =& $retVal[\'data\'][\'results\'];\\n                foreach ($users as &$user) {\\n                    unset($user[\'class_key\'], $user[\'remote_key\'], $user[\'remote_data\'],\\n                        $user[\'hash_class\'], $user[\'session_stale\'], $user[\'email\'], $user[\'cls\'],\\n                        $user[\'sudo\'], $user[\'active\'], $user[\'blocked\'], $user[\'primary_group\']);\\n                }\\n            }\\n        }\\n    }\\n\\n} else {\\n    $retVal =  array(\\n        \'success\' => false,\\n        \'error_message\' => \'Empty Request\',\\n    );\\n}\\n\\nreturn $modx->toJSON($retVal);"}',
        'guid' => '81a194efb7ad9f4fb278f298854965eb',
        'native_key' => 2,
        'signature' => 'ecfb0b23fadc8e7ab198f9ea571b60e6',
      ),
      '1106c1651f879f75c2a03adea0b3d308' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":3,"source":0,"property_preprocess":0,"name":"MessageAlert","description":"Show current user how many messages are available","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * MessageAlert snippet for MessageManager extra\\n *\\n * Copyright 2015-2018 by Bob Ray <http:\\/\\/bobsguides.com>\\n * Created on 03-05-2015\\n *\\n * MessageManager is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * MessageManager is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * MessageManager; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package messagemanager\\n *\\/\\n\\n\\/**\\n * Description\\n * -----------\\n * Show current user how many messages are available\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * @package messagemanager\\n **\\/\\n\\n$language = $modx->getOption(\'language\', $scriptProperties,\\n    $modx->getOption(\'culture_key\'));\\n$language = empty($language) ? \'en\' : $language;\\n$modx->lexicon->load($language . \':messagemanager:default\');\\n\\n$count = (int) $modx->getCount(\'modUserMessage\',\\n    array(\'recipient\' => $modx->user->get(\'id\')));\\n\\n$unreadCount = (int) $modx->getCount(\'modUserMessage\',\\n    array(\\n        \'recipient\' => $modx->user->get(\'id\'),\\n        \'read\'      => false,\\n    )\\n);\\n$unread = $modx->lexicon(\'mm_unread\');\\n$unreadCount = \'(\' . $unreadCount . \' \' . $unread . \')\';\\n$noun = $modx->lexicon(\'mm_messages\');\\n\\nswitch ($count) {\\n    case 0:\\n        $count = $modx->lexicon(\'mm_count_no\');\\n        $unreadCount = \'\';\\n        break;\\n    case 1:\\n        $noun = $modx->lexicon(\'mm_message\');\\n        break;\\n    default:\\n        break;\\n}\\n\\n\\nreturn \\"{$count} {$noun} {$unreadCount}\\";","locked":0,"properties":"a:1:{s:8:\\"language\\";a:7:{s:4:\\"name\\";s:8:\\"language\\";s:4:\\"desc\\";s:13:\\"language_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:2:\\"en\\";s:7:\\"lexicon\\";s:25:\\"messagemanager:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * MessageAlert snippet for MessageManager extra\\n *\\n * Copyright 2015-2018 by Bob Ray <http:\\/\\/bobsguides.com>\\n * Created on 03-05-2015\\n *\\n * MessageManager is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * MessageManager is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * MessageManager; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package messagemanager\\n *\\/\\n\\n\\/**\\n * Description\\n * -----------\\n * Show current user how many messages are available\\n *\\n * Variables\\n * ---------\\n * @var $modx modX\\n * @var $scriptProperties array\\n *\\n * @package messagemanager\\n **\\/\\n\\n$language = $modx->getOption(\'language\', $scriptProperties,\\n    $modx->getOption(\'culture_key\'));\\n$language = empty($language) ? \'en\' : $language;\\n$modx->lexicon->load($language . \':messagemanager:default\');\\n\\n$count = (int) $modx->getCount(\'modUserMessage\',\\n    array(\'recipient\' => $modx->user->get(\'id\')));\\n\\n$unreadCount = (int) $modx->getCount(\'modUserMessage\',\\n    array(\\n        \'recipient\' => $modx->user->get(\'id\'),\\n        \'read\'      => false,\\n    )\\n);\\n$unread = $modx->lexicon(\'mm_unread\');\\n$unreadCount = \'(\' . $unreadCount . \' \' . $unread . \')\';\\n$noun = $modx->lexicon(\'mm_messages\');\\n\\nswitch ($count) {\\n    case 0:\\n        $count = $modx->lexicon(\'mm_count_no\');\\n        $unreadCount = \'\';\\n        break;\\n    case 1:\\n        $noun = $modx->lexicon(\'mm_message\');\\n        break;\\n    default:\\n        break;\\n}\\n\\n\\nreturn \\"{$count} {$noun} {$unreadCount}\\";"}',
        'guid' => '4a2a104b836e7a424a3d8f3ad0bff348',
        'native_key' => 3,
        'signature' => 'df2100ec711438bba6d7145ead1b4cca',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'messagemanager',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"messagemanager-1.0.2-pl\\/modCategory\\/c8edaf9b3d9754876cc84eec635f382a\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"messagemanager"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"messagemanager-1.0.2-pl\\/modCategory\\/c8edaf9b3d9754876cc84eec635f382a\\/1\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"messagemanager"}',
    ),
    2 => 
    array (
      'type' => 'php',
      'body' => '{"source":"messagemanager-1.0.2-pl\\/modCategory\\/c8edaf9b3d9754876cc84eec635f382a.resource.resolver.resolver","type":"php","name":"resource.resolver"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '80ce96c6c40d4553d8ef3748c6a0f4bb',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => 'c8edaf9b3d9754876cc84eec635f382a',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"MessageManager","rank":0}',
);